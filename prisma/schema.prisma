generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  SHIPPED
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email      String   @unique
  name       String
  password   String
  avatarPath String   @default("/uploads/default-avarat.png") @map("avatar_path")
  phone      String   @default("")
  role       UserRole @default(USER)

  orders    Order[]
  reviews   Review[]
  favorites Product[]
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  slug        String   @unique
  name        String   @unique
  description String
  price       Int
  images      String[]

  orderItems OrderItem[]

  reviews         Review[]
  characteristics Characteristics[]
  clicks          Click?

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?      @map("category_id")

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?  @map("user_id")
}

model Characteristics {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name  String
  value String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @map("product_id")
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String    @unique
  slug     String    @unique
  products Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  text   String
  rating Int

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @map("user_id")

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @map("product_id")
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status OrderStatus @default(PENDING)

  items OrderItem[]

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity Int
  price    Int

  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?   @map("order_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId Int      @map("product_id")

  @@map("Order_item")
}

model Carousel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name  String         @unique
  items CarouselItem[]
}

model CarouselItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  image      String
  title      String
  carousel   Carousel? @relation(fields: [carouselId], references: [id])
  carouselId Int?      @map("carousel_id")
}

model Click {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @unique @map("product_id")

  count Int
}
